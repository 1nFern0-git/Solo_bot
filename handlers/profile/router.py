import html
import os

from typing import Any

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineQuery, InlineQueryResultArticle, InputTextMessageContent, Message
from config import INLINE_MODE, REFERRAL_OFFERS, TRIAL_TIME, USERNAME_BOT

from database import get_balance, get_key_count, get_last_payments, get_referral_stats, get_trial
from handlers.texts import get_referral_link, invite_message_send, profile_message_send
from handlers.utils import edit_or_send_message
from keyboards.profile import get_balance_keyboard, get_invite_keyboard, get_profile_keyboard


router = Router()


@router.callback_query(F.data == "profile")
@router.message(F.text == "/profile")
async def process_callback_view_profile(
    state: FSMContext,
    admin: bool,
    chat_id: int,
    target_message: Message,
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
        admin: –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
        chat_id: ID —á–∞—Ç–∞ (–¥–æ–±–∞–≤–ª–µ–Ω–æ middleware).
        target_message: –¶–µ–ª–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ (–¥–æ–±–∞–≤–ª–µ–Ω–æ middleware).
    """
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
    profile_message = await profile_message_send(chat_id)

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–æ—Ñ–∏–ª—è
    builder = get_profile_keyboard(admin)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
    await edit_or_send_message(
        target_message=target_message,
        text=profile_message,
        reply_markup=builder.as_markup(),
        media_path=None,
    )


@router.callback_query(F.data == "balance")
async def balance_handler(callback_query: CallbackQuery, session: Any, chat_id: int, target_message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –±–∞–ª–∞–Ω—Å–∞.

    Args:
        callback_query: –ö–æ–ª–±—ç–∫ –∑–∞–ø—Ä–æ—Å.
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        chat_id: ID —á–∞—Ç–∞ (–¥–æ–±–∞–≤–ª–µ–Ω–æ middleware).
        target_message: –¶–µ–ª–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ (–¥–æ–±–∞–≤–ª–µ–Ω–æ middleware).
    """
    balance = await get_balance(chat_id, session)

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–∞–ª–∞–Ω—Å–∞
    builder = get_balance_keyboard()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–æ–º
    await edit_or_send_message(
        target_message=target_message,
        text=f"<b>üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> {balance} —Ä—É–±.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª <b>üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å</b> –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.",
        reply_markup=builder.as_markup(),
        media_path=None,
    )


@router.callback_query(F.data == "balance_history")
async def balance_history_handler(callback_query: CallbackQuery, session: Any, chat_id: int, target_message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–∞–Ω—Å–∞.

    Args:
        callback_query: –ö–æ–ª–±—ç–∫ –∑–∞–ø—Ä–æ—Å.
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        chat_id: ID —á–∞—Ç–∞ (–¥–æ–±–∞–≤–ª–µ–Ω–æ middleware).
        target_message: –¶–µ–ª–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ (–¥–æ–±–∞–≤–ª–µ–Ω–æ middleware).
    """
    payments = await get_last_payments(chat_id, session)

    if not payments:
        history_text = "<b>üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:</b>\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ –±–∞–ª–∞–Ω—Å—É."
    else:
        history_text = "<b>üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:</b>\n\n"
        for payment in payments:
            amount = payment["amount"]
            date = payment["created_at"].strftime("%d.%m.%Y %H:%M")
            description = html.escape(payment["description"] or "")

            if amount > 0:
                history_text += f"‚ûï <b>{amount}</b> —Ä—É–±. - {description} ({date})\n"
            else:
                history_text += f"‚ûñ <b>{abs(amount)}</b> —Ä—É–±. - {description} ({date})\n"

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–∞–ª–∞–Ω—Å–∞
    builder = get_balance_keyboard()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –±–∞–ª–∞–Ω—Å–∞
    await edit_or_send_message(
        target_message=target_message,
        text=history_text,
        reply_markup=builder.as_markup(),
        media_path=None,
    )


@router.callback_query(F.data == "invite")
@router.message(F.text == "/invite")
async def invite_handler(chat_id: int, target_message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π.

    Args:
        chat_id: ID —á–∞—Ç–∞ (–¥–æ–±–∞–≤–ª–µ–Ω–æ middleware).
        target_message: –¶–µ–ª–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ (–¥–æ–±–∞–≤–ª–µ–Ω–æ middleware).
    """
    referral_link = get_referral_link(chat_id)
    referral_stats = await get_referral_stats(chat_id)
    invite_message = invite_message_send(referral_link, referral_stats)
    image_path = os.path.join("img", "pic_invite.jpg")

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
    builder = get_invite_keyboard(chat_id, referral_link)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º
    await edit_or_send_message(
        target_message=target_message,
        text=invite_message,
        reply_markup=builder.as_markup(),
        media_path=image_path,
        disable_web_page_preview=False,
    )


@router.inline_query(F.query.in_(["referral", "ref", "invite"]))
async def inline_referral_handler(inline_query: InlineQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.

    Args:
        inline_query: –ò–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å.
    """

    results = []

    for index, offer in enumerate(REFERRAL_OFFERS):
        description = offer["description"][:64]
        message_text = offer["message"].format(trial_time=TRIAL_TIME)[:4096]

        results.append(
            InlineQueryResultArticle(
                id=f"ref_{index}",
                title=offer["title"],
                description=description,
                input_message_content=InputTextMessageContent(
                    message_text=message_text,
                    parse_mode="HTML",
                ),
                thumbnail_url=offer.get("thumbnail_url"),
                thumbnail_width=100,
                thumbnail_height=100,
            )
        )

    await inline_query.answer(results=results, cache_time=300)
