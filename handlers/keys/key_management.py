import asyncio
import uuid
from datetime import datetime, timedelta
from typing import Any

import pytz
from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config import (
    ADMIN_PASSWORD,
    ADMIN_USERNAME,
    CONNECT_ANDROID,
    CONNECT_IOS,
    DOWNLOAD_ANDROID,
    DOWNLOAD_IOS,
    NOTIFY_EXTRA_DAYS,
    PUBLIC_LINK,
    RENEWAL_PRICES,
    SUPPORT_CHAT_URL,
    TRIAL_TIME,
    TRIAL_TIME_DISABLE,
    USE_COUNTRY_SELECTION,
    USE_NEW_PAYMENT_FLOW,
)
from py3xui import AsyncApi

from bot import bot
from client import delete_client
from database import (
    add_connection,
    check_connection_exists,
    create_temporary_data,
    delete_key,
    get_balance,
    get_key_details,
    get_trial,
    store_key,
    update_balance,
    update_trial,
)
from handlers.buttons.add_subscribe import (
    DOWNLOAD_ANDROID_BUTTON,
    DOWNLOAD_IOS_BUTTON,
    IMPORT_ANDROID,
    IMPORT_IOS,
    PC_BUTTON,
    TV_BUTTON,
)
from handlers.keys.key_utils import create_client_on_server, create_key_on_cluster
from handlers.payments.robokassa_pay import handle_custom_amount_input
from handlers.payments.yookassa_pay import process_custom_amount_input
from handlers.texts import DISCOUNTS, key_message_success
from handlers.utils import generate_random_email, get_least_loaded_cluster
from logger import logger

router = Router()

moscow_tz = pytz.timezone("Europe/Moscow")


class Form(FSMContext):
    waiting_for_server_selection = "waiting_for_server_selection"
    waiting_for_key_name = "waiting_for_key_name"
    viewing_profile = "viewing_profile"
    waiting_for_message = "waiting_for_message"


@router.callback_query(F.data == "create_key")
async def confirm_create_new_key(callback_query: CallbackQuery, state: FSMContext, session: Any):
    tg_id = callback_query.message.chat.id
    await handle_key_creation(tg_id, state, session, callback_query)


async def handle_key_creation(
    tg_id: int,
    state: FSMContext,
    session: Any,
    message_or_query: Message | CallbackQuery,
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ —Å —É—á—ë—Ç–æ–º –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞."""
    current_time = datetime.now(moscow_tz)

    if not TRIAL_TIME_DISABLE:
        trial_status = await get_trial(tg_id, session)

        if trial_status in [0, -1]:
            extra_days = NOTIFY_EXTRA_DAYS if trial_status == -1 else 0
            expiry_time = current_time + timedelta(days=TRIAL_TIME + extra_days)

            logger.info(f"–î–æ—Å—Ç—É–ø–µ–Ω {TRIAL_TIME + extra_days}-–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}.")

            updated = await update_trial(tg_id, 1, session)
            if updated:
                await create_key(tg_id, expiry_time, state, session, message_or_query)
                return
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–∏–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}.")

    builder = InlineKeyboardBuilder()
    for index, (plan_id, price) in enumerate(RENEWAL_PRICES.items()):
        discount_text = ""
        if plan_id in DISCOUNTS:
            discount_percentage = DISCOUNTS[plan_id]
            discount_text = f" ({discount_percentage}% —Å–∫–∏–¥–∫–∞)"
            if index == len(RENEWAL_PRICES) - 1:
                discount_text = f" ({discount_percentage}% üî•)"
        builder.row(
            InlineKeyboardButton(
                text=f"üìÖ {plan_id} –º–µ—Å. - {price}‚ÇΩ{discount_text}",
                callback_data=f"select_plan_{plan_id}",
            )
        )
    builder.row(InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile"))

    await message_or_query.message.answer(
        "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞:",
        reply_markup=builder.as_markup(),
    )

    await state.update_data(tg_id=tg_id)
    await state.set_state(Form.waiting_for_server_selection)


@router.callback_query(F.data.startswith("select_plan_"))
async def select_tariff_plan(callback_query: CallbackQuery, session: Any):
    tg_id = callback_query.message.chat.id
    plan_id = callback_query.data.split("_")[-1]
    plan_price = RENEWAL_PRICES.get(plan_id)
    if plan_price is None:
        await callback_query.message.answer("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω.")
        return
    duration_days = int(plan_id) * 30
    balance = await get_balance(tg_id)
    if balance < plan_price:
        required_amount = plan_price - balance
        await create_temporary_data(
            session,
            tg_id,
            "waiting_for_payment",
            {
                "plan_id": plan_id,
                "plan_price": plan_price,
                "duration_days": duration_days,
                "required_amount": required_amount,
            },
        )
        if USE_NEW_PAYMENT_FLOW == "YOOKASSA":
            await process_custom_amount_input(callback_query, session)
        elif USE_NEW_PAYMENT_FLOW == "ROBOKASSA":
            await handle_custom_amount_input(callback_query, session)
        else:
            builder = InlineKeyboardBuilder()
            builder.row(InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="pay"))
            builder.row(InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile"))
            await callback_query.message.answer(
                f"üí≥ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ {required_amount}‚ÇΩ.",
                reply_markup=builder.as_markup(),
            )
        return
    expiry_time = datetime.now(moscow_tz) + timedelta(days=duration_days)
    await create_key(tg_id, expiry_time, None, session, callback_query, None, plan_id)
    await update_balance(tg_id, -plan_price, session)


async def create_key(
    tg_id: int,
    expiry_time: datetime,
    state: FSMContext | None,
    session: Any,
    message_or_query: Message | CallbackQuery | None = None,
    old_key_name: str = None,
    plan: int = None,
):
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª—é—á —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Å—Ä–æ–∫–æ–º –¥–µ–π—Å—Ç–≤–∏—è."""

    if not await check_connection_exists(tg_id):
        await add_connection(tg_id, balance=0.0, trial=0, session=session)
        logger.info(f"[Connection] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}")

    if USE_COUNTRY_SELECTION:
        logger.info("[Country Selection] USE_COUNTRY_SELECTION –≤–∫–ª—é—á–µ–Ω. –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∏–º–µ–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞")
        least_loaded_cluster = await get_least_loaded_cluster()
        logger.info(
            f"[Country Selection] –ù–∞–∏–º–µ–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Ç–µ—Ä: {least_loaded_cluster}. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤"
        )
        servers = await session.fetch(
            "SELECT server_name FROM servers WHERE cluster_name = $1",
            least_loaded_cluster,
        )
        countries = [server["server_name"] for server in servers]
        logger.info(f"[Country Selection] –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤: {countries}")

        builder = InlineKeyboardBuilder()
        ts = int(expiry_time.timestamp())
        for country in countries:
            if old_key_name:
                callback_data = f"select_country|{country}|{ts}|{old_key_name}"
            else:
                callback_data = f"select_country|{country}|{ts}"
            builder.row(InlineKeyboardButton(text=country, callback_data=callback_data))
        builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="profile"))

        if isinstance(message_or_query, Message):
            await message_or_query.answer(
                "üåç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –≤–∞—à–µ–≥–æ –∫–ª—é—á–∞:",
                reply_markup=builder.as_markup(),
            )
        elif isinstance(message_or_query, CallbackQuery):
            await message_or_query.message.answer(
                "üåç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –≤–∞—à–µ–≥–æ –∫–ª—é—á–∞:",
                reply_markup=builder.as_markup(),
            )
        elif tg_id is not None:
            await bot.send_message(
                chat_id=tg_id,
                text="üåç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –≤–∞—à–µ–≥–æ –∫–ª—é—á–∞:",
                reply_markup=builder.as_markup(),
            )
        else:
            logger.error("[Country Selection] –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

        return

    while True:
        key_name = generate_random_email()
        logger.info(f"[Key Generation] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–º—è –∫–ª—é—á–∞: {key_name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}")
        existing_key = await get_key_details(key_name, session)
        if not existing_key:
            break
        logger.warning(f"[Key Generation] –ò–º—è –∫–ª—é—á–∞ {key_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ.")

    client_id = str(uuid.uuid4())
    email = key_name.lower()
    expiry_timestamp = int(expiry_time.timestamp() * 1000)
    public_link = f"{PUBLIC_LINK}{email}/{tg_id}"

    try:
        least_loaded_cluster = await get_least_loaded_cluster()
        tasks = [
            asyncio.create_task(
                create_key_on_cluster(least_loaded_cluster, tg_id, client_id, email, expiry_timestamp, plan)
            )
        ]
        await asyncio.gather(*tasks)
        logger.info(f"[Key Creation] –ö–ª—é—á —Å–æ–∑–¥–∞–Ω –Ω–∞ –∫–ª–∞—Å—Ç–µ—Ä–µ {least_loaded_cluster} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}")
        await store_key(
            tg_id,
            client_id,
            email,
            expiry_timestamp,
            public_link,
            least_loaded_cluster,
            session,
        )
        await update_trial(tg_id, 1, session)
        logger.info(f"[Database] –ö–ª—é—á —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}")
    except Exception as e:
        logger.error(f"[Error] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}: {e}")
        error_message = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        if isinstance(message_or_query, Message):
            await message_or_query.answer(error_message)
        elif isinstance(message_or_query, CallbackQuery):
            await message_or_query.message.answer(error_message)
        else:
            await bot.send_message(chat_id=tg_id, text=error_message)
        return

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=SUPPORT_CHAT_URL))
    builder.row(
        InlineKeyboardButton(text=DOWNLOAD_IOS_BUTTON, url=DOWNLOAD_IOS),
        InlineKeyboardButton(text=DOWNLOAD_ANDROID_BUTTON, url=DOWNLOAD_ANDROID),
    )
    builder.row(
        InlineKeyboardButton(text=IMPORT_IOS, url=f"{CONNECT_IOS}{public_link}"),
        InlineKeyboardButton(text=IMPORT_ANDROID, url=f"{CONNECT_ANDROID}{public_link}"),
    )
    builder.row(
        InlineKeyboardButton(text=PC_BUTTON, callback_data=f"connect_pc|{email}"),
        InlineKeyboardButton(text=TV_BUTTON, callback_data=f"connect_tv|{email}"),
    )
    builder.row(InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile"))

    expiry_time = expiry_time.replace(tzinfo=None).astimezone(moscow_tz)

    remaining_time = expiry_time - datetime.now(moscow_tz)
    days = remaining_time.days
    key_message_text = key_message_success(public_link, f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days} üìÖ")

    if isinstance(message_or_query, Message):
        await message_or_query.answer(key_message_text, reply_markup=builder.as_markup())
    elif isinstance(message_or_query, CallbackQuery):
        await message_or_query.message.answer(key_message_text, reply_markup=builder.as_markup())
    else:
        await bot.send_message(chat_id=tg_id, text=key_message_text, reply_markup=builder.as_markup())

    if state:
        await state.clear()


@router.callback_query(F.data.startswith("change_location|"))
async def change_location_callback(callback_query: CallbackQuery, session: Any):
    try:
        data = callback_query.data.split("|")
        if len(data) < 2:
            await callback_query.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
            return

        old_key_name = data[1]
        record = await get_key_details(old_key_name, session)
        if not record:
            await callback_query.answer("‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        expiry_timestamp = record["expiry_time"]
        ts = int(expiry_timestamp / 1000)

        servers = await session.fetch("SELECT server_name FROM servers")
        countries = [row["server_name"] for row in servers]
        logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è —Å–º–µ–Ω—ã –ª–æ–∫–∞—Ü–∏–∏: {countries}")

        builder = InlineKeyboardBuilder()
        for country in countries:
            callback_data = f"select_country|{country}|{ts}|{old_key_name}"
            builder.row(InlineKeyboardButton(text=country, callback_data=callback_data))
        builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_key|{old_key_name}"))

        await callback_query.message.answer(
            "üåç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é –¥–ª—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=builder.as_markup()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.id}: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ª–æ–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)


@router.callback_query(F.data.startswith("select_country|"))
async def handle_country_selection(callback_query: CallbackQuery, session: Any):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã.
    –§–æ—Ä–º–∞—Ç callback data:
      select_country|{selected_country}|{ts} [|{old_key_name} (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)]
    –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω old_key_name ‚Äì –∑–Ω–∞—á–∏—Ç, –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–º–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏–∏.
    """
    data = callback_query.data.split("|")
    if len(data) < 3:
        await callback_query.message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    selected_country = data[1]
    try:
        ts = int(data[2])
    except ValueError:
        await callback_query.message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    expiry_time = datetime.fromtimestamp(ts, tz=moscow_tz)

    old_key_name = data[3] if len(data) > 3 else None

    tg_id = callback_query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_id} –≤—ã–±—Ä–∞–ª —Å—Ç—Ä–∞–Ω—É: {selected_country}")
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è (timestamp): {ts}")

    await finalize_key_creation(tg_id, expiry_time, selected_country, None, session, callback_query, old_key_name)


async def finalize_key_creation(
    tg_id: int,
    expiry_time: datetime,
    selected_country: str,
    state: FSMContext | None,
    session: Any,
    callback_query: CallbackQuery,
    old_key_name: str = None,
):
    """–§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–æ–π.
    –ï—Å–ª–∏ old_key_name –ø–µ—Ä–µ–¥–∞–Ω, –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞ —Å—Ç–∞—Ä—ã–π –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω.
    """

    if not await check_connection_exists(tg_id):
        await add_connection(tg_id, balance=0.0, trial=0, session=session)
        logger.info(f"[Connection] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}")

    expiry_time = expiry_time.astimezone(moscow_tz)

    while True:
        key_name = generate_random_email()
        existing_key = await get_key_details(key_name, session)
        if not existing_key:
            break
        logger.warning(f"Key name '{key_name}' already exists for user {tg_id}. Generating a new one.")

    client_id = str(uuid.uuid4())
    email = key_name.lower()
    expiry_timestamp = int(expiry_time.timestamp() * 1000)
    public_link = f"{PUBLIC_LINK}{email}/{tg_id}"

    try:
        server_info = await session.fetchrow(
            "SELECT api_url, inbound_id, server_name FROM servers WHERE server_name = $1",
            selected_country,
        )

        if not server_info:
            raise ValueError(f"–°–µ—Ä–≤–µ—Ä {selected_country} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        semaphore = asyncio.Semaphore(2)
        await create_client_on_server(
            server_info=server_info,
            tg_id=tg_id,
            client_id=client_id,
            email=email,
            expiry_timestamp=expiry_timestamp,
            semaphore=semaphore,
        )

        logger.info(f"Key created on server {selected_country} for user {tg_id}.")
        await store_key(
            tg_id,
            client_id,
            email,
            expiry_timestamp,
            public_link,
            selected_country,
            session,
        )

    except Exception as e:
        logger.error(f"Error while creating the key for user {tg_id}: {e}")
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=SUPPORT_CHAT_URL))
    builder.row(
        InlineKeyboardButton(text=DOWNLOAD_IOS_BUTTON, url=DOWNLOAD_IOS),
        InlineKeyboardButton(text=DOWNLOAD_ANDROID_BUTTON, url=DOWNLOAD_ANDROID),
    )
    builder.row(
        InlineKeyboardButton(text=IMPORT_IOS, url=f"{CONNECT_IOS}{public_link}"),
        InlineKeyboardButton(text=IMPORT_ANDROID, url=f"{CONNECT_ANDROID}{public_link}"),
    )
    builder.row(
        InlineKeyboardButton(text=PC_BUTTON, callback_data=f"connect_pc|{email}"),
        InlineKeyboardButton(text=TV_BUTTON, callback_data=f"connect_tv|{email}"),
    )
    builder.row(InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile"))

    remaining_time = expiry_time - datetime.now(moscow_tz)
    days = remaining_time.days
    key_message_text = key_message_success(public_link, f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days} üìÖ")

    await callback_query.message.answer(key_message_text, reply_markup=builder.as_markup())

    if state:
        await state.clear()

    if old_key_name:
        try:
            old_record = await get_key_details(old_key_name, session)
            if old_record is not None:
                old_client_id = old_record["client_id"]
                old_email = old_record["email"]
                server_name = old_record.get("server_id")

                if server_name:
                    server_info = await session.fetchrow(
                        "SELECT api_url, inbound_id, server_name FROM servers WHERE server_name = $1",
                        server_name,
                    )
                    if server_info:
                        xui = AsyncApi(
                            server_info["api_url"],
                            username=ADMIN_USERNAME,
                            password=ADMIN_PASSWORD,
                        )
                        deletion_success = await delete_client(
                            xui,
                            server_info["inbound_id"],
                            old_email,
                            old_client_id,
                        )
                        if deletion_success:
                            logger.info(f"–ö–ª–∏–µ–Ω—Ç —Å ID {old_client_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞.")
                        else:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ —Å ID {old_client_id} —Å —Å–µ—Ä–≤–µ—Ä–∞.")
                    else:
                        logger.warning(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ {server_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î.")
                else:
                    logger.warning("–ò–º—è —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –∫–ª—é—á–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ.")

                await delete_key(old_client_id, session)
                logger.info(f"–°—Ç–∞—Ä—ã–π –∫–ª—é—á {old_key_name} (client_id: {old_client_id}) —É–¥–∞–ª—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}.")
            else:
                logger.warning(f"–ó–∞–ø–∏—Å—å –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –∫–ª—é—á–∞ {old_key_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ –∫–ª—é—á–∞ {old_key_name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}: {e}")
