import os
from typing import Any

import aiofiles
from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    BufferedInputFile,
    CallbackQuery,
    InlineKeyboardButton,
    Message,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot import bot
from config import (
    CAPTCHA_ENABLE,
    CHANNEL_EXISTS,
    CHANNEL_ID,
    CHANNEL_REQUIRED,
    CHANNEL_URL,
    DONATIONS_ENABLE,
    SUPPORT_CHAT_URL,
)
from database import (
    add_connection,
    add_referral,
    check_connection_exists,
    get_referral_by_referred_id,
    get_trial,
    update_balance,
)
from handlers.captcha import generate_captcha
from handlers.keys.key_management import create_key
from handlers.texts import WELCOME_TEXT, get_about_vpn
from logger import logger

router = Router()


@router.callback_query(F.data == "start")
async def handle_start_callback_query(
    callback_query: CallbackQuery, state: FSMContext, session: Any, admin: bool, captcha: bool = False
):
    await start_command(callback_query.message, state, session, admin, captcha)


@router.message(Command("start"))
async def start_command(message: Message, state: FSMContext, session: Any, admin: bool, captcha: bool = True):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start, –≤–∫–ª—é—á–∞—è –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏, —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏ –ø–æ–¥–∞—Ä–∫–æ–≤."""
    logger.info(f"–í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è start_command –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}")

    try:
        await state.clear()
        logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id} —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ.")
    except Exception:
        logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id} –Ω–µ –±—ã–ª–æ –æ—á–∏—â–µ–Ω–æ.")

    if CAPTCHA_ENABLE and captcha:
        captcha_data = await generate_captcha(message, state)
        await message.answer(text=captcha_data["text"], reply_markup=captcha_data["markup"])
        return

    if CHANNEL_EXISTS and CHANNEL_REQUIRED:
        try:
            member = await bot.get_chat_member(CHANNEL_ID, message.chat.id)
            if member.status not in ["member", "administrator", "creator"]:
                original_text = message.text
                await state.update_data(original_text=original_text)
                builder = InlineKeyboardBuilder()
                builder.row(InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription"))
                await message.answer(
                    f"–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ <a href='{CHANNEL_URL}'><b>–Ω–∞—à –∫–∞–Ω–∞–ª</b></a>",
                    reply_markup=builder.as_markup(),
                )
                return
            else:
                logger.info(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª (—Å—Ç–∞—Ç—É—Å: {member.status}). –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É."
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}: {e}")
            await state.update_data(start_text=message.text)
            builder = InlineKeyboardBuilder()
            builder.row(InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription"))
            await message.answer(
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ <a href='{CHANNEL_URL}'><b>–Ω–∞—à –∫–∞–Ω–∞–ª</b></a>",
                reply_markup=builder.as_markup(),
            )
            return

    await process_start_logic(message, state, session, admin)


async def process_start_logic(
    message: Message, state: FSMContext, session: Any, admin: bool, text_to_process: str = None
):
    text = text_to_process if text_to_process is not None else message.text
    if text:
        try:
            connection_exists = await check_connection_exists(message.chat.id)
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {connection_exists}")

            if not connection_exists:
                await add_connection(tg_id=message.chat.id, session=session)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")

            if "coupons_" in text:
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫—É–ø–æ–Ω: {text}")
                coupon_code = text.split("coupons_")[1].strip()
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –≤–≤—ë–ª –∫—É–ø–æ–Ω: {coupon_code}")

                coupon = await session.fetchrow(
                    "SELECT id, code, amount, usage_limit, usage_count, is_used FROM coupons WHERE code = $1",
                    coupon_code,
                )
                if coupon is None:
                    logger.warning(f"–ö—É–ø–æ–Ω {coupon_code} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    await message.answer("‚ùå –ö—É–ø–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                    return await show_start_menu(message, admin, session)

                usage_exists = await session.fetchval(
                    "SELECT 1 FROM coupon_usages WHERE coupon_id = $1 AND user_id = $2",
                    coupon["id"],
                    message.chat.id,
                )
                if usage_exists:
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –∫—É–ø–æ–Ω {coupon_code}.")
                    await message.answer("‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –∫—É–ø–æ–Ω!")
                    return await show_start_menu(message, admin, session)

                if coupon["is_used"] or coupon["usage_count"] >= coupon["usage_limit"]:
                    logger.info(f"–ö—É–ø–æ–Ω {coupon_code} —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∏–ª–∏ –∏—Å—á–µ—Ä–ø–∞–Ω.")
                    await message.answer("‚ùå –≠—Ç–æ—Ç –∫—É–ø–æ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!")
                    return await show_start_menu(message, admin, session)

                await update_balance(message.chat.id, coupon["amount"])
                logger.info(f"–ù–∞—á–∏—Å–ª–µ–Ω–æ {coupon['amount']} –µ–¥–∏–Ω–∏—Ü –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}")

                new_usage_count = coupon["usage_count"] + 1
                is_used = new_usage_count >= coupon["usage_limit"]

                await session.execute(
                    "UPDATE coupons SET usage_count = $1, is_used = $2 WHERE code = $3",
                    new_usage_count,
                    is_used,
                    coupon_code,
                )

                await session.execute(
                    "INSERT INTO coupon_usages (coupon_id, user_id, used_at) VALUES ($1, $2, NOW())",
                    coupon["id"],
                    message.chat.id,
                )

                logger.info(
                    f"–ö—É–ø–æ–Ω {coupon_code} —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.chat.id}, –Ω–∞—á–∏—Å–ª–µ–Ω–æ {coupon['amount']} RUB."
                )
                await message.answer(f"üéâ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {coupon['amount']} RUB –ø–æ –∫—É–ø–æ–Ω—É!")
                return await show_start_menu(message, admin, session)

            if "gift_" in text:
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫: {text}")
                parts = text.split("gift_")[1].split("_")
                if len(parts) < 2:
                    logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∞—Å—Ç–µ–π –ø–æ—Å–ª–µ 'gift_'")
                    await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫.")
                    return await show_start_menu(message, admin, session)
                gift_id = parts[0]
                recipient_tg_id = message.chat.id

                gift_info = await session.fetchrow(
                    """
                    SELECT sender_tg_id, selected_months, expiry_time, is_used, recipient_tg_id 
                    FROM gifts WHERE gift_id = $1
                    """,
                    gift_id,
                )

                if gift_info is None:
                    logger.warning(f"–ü–æ–¥–∞—Ä–æ–∫ —Å ID {gift_id} —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                    await message.answer("–≠—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                    return await show_start_menu(message, admin, session)

                if gift_info["is_used"]:
                    logger.warning(f"–ü–æ–¥–∞—Ä–æ–∫ —Å ID {gift_id} —É–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–∞–Ω–µ–µ.")
                    await message.answer("–≠—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
                    return await show_start_menu(message, admin, session)

                if gift_info["sender_tg_id"] == recipient_tg_id:
                    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {recipient_tg_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –∂–µ –ø–æ–¥–∞—Ä–æ–∫.")
                    await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç —Å–∞–º–æ–≥–æ —Å–µ–±—è.")
                    return await show_start_menu(message, admin, session)

                if gift_info["recipient_tg_id"] is not None:
                    logger.warning(
                        f"–ü–æ–¥–∞—Ä–æ–∫ {gift_id} —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ({gift_info['recipient_tg_id']})."
                    )
                    await message.answer("‚ùå –≠—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ —É–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                    return await show_start_menu(message, admin, session)

                if not connection_exists:
                    await add_referral(recipient_tg_id, gift_info["sender_tg_id"], session)
                    logger.info(
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {recipient_tg_id} —Ç–µ–ø–µ—Ä—å —è–≤–ª—è–µ—Ç—Å—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è {gift_info['sender_tg_id']}."
                    )

                await session.execute(
                    """
                    UPDATE connections SET trial = 1 WHERE tg_id = $1
                    """,
                    recipient_tg_id,
                )

                selected_months = gift_info["selected_months"]
                expiry_time = gift_info["expiry_time"].replace(tzinfo=None)

                logger.info(f"–ü–æ–¥–∞—Ä–æ–∫ —Å ID {gift_id} —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {recipient_tg_id}.")

                await create_key(recipient_tg_id, expiry_time, state, session, message)
                logger.info(f"–ö–ª—é—á —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {recipient_tg_id} –Ω–∞ —Å—Ä–æ–∫ {selected_months} –º–µ—Å—è—Ü–µ–≤.")

                await session.execute(
                    """
                    UPDATE gifts SET is_used = TRUE, recipient_tg_id = $1 
                    WHERE gift_id = $2
                    """,
                    recipient_tg_id,
                    gift_id,
                )

                await message.answer(
                    f"üéâ –í–∞—à –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞ {selected_months} "
                    f"{'–º–µ—Å—è—Ü' if selected_months == 1 else '–º–µ—Å—è—Ü–∞' if selected_months in [2, 3, 4] else '–º–µ—Å—è—Ü–µ–≤'} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!"
                )
                logger.info(f"–ü–æ–¥–∞—Ä–æ–∫ –Ω–∞ {selected_months} –º–µ—Å—è—Ü–µ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {recipient_tg_id}.")
                return

            elif "referral_" in text:
                try:
                    referrer_tg_id = int(text.split("referral_")[1])
                    if connection_exists:
                        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º.")
                        await message.answer("‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.")
                        return await show_start_menu(message, admin, session)

                    if referrer_tg_id == message.chat.id:
                        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è —Å—Ç–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º —Å–∞–º–æ–≥–æ —Å–µ–±—è.")
                        await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –±—ã—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º —Å–∞–º–æ–≥–æ —Å–µ–±—è.")
                        return await show_start_menu(message, admin, session)

                    existing_referral = await get_referral_by_referred_id(message.chat.id, session)
                    if existing_referral:
                        logger.info(f"–†–µ—Ñ–µ—Ä–∞–ª —Å ID {message.chat.id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                        return await show_start_menu(message, admin, session)

                    await add_referral(message.chat.id, referrer_tg_id, session)
                    logger.info(f"–†–µ—Ñ–µ—Ä–∞–ª {message.chat.id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —Å—Å—ã–ª–∫—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {referrer_tg_id}")
                    await message.answer(f"–í—ã —Å—Ç–∞–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {referrer_tg_id}")
                    return await show_start_menu(message, admin, session)

                except (ValueError, IndexError) as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏: {e}")
                return

            else:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –∑–∞—à–µ–ª –±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏, –ø–æ–¥–∞—Ä–∫–∞ –∏–ª–∏ –∫—É–ø–æ–Ω–∞.")

            await show_start_menu(message, admin, session)

        except (ValueError, IndexError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        await show_start_menu(message, admin, session)


@router.callback_query(F.data == "check_subscription")
async def check_subscription_callback(callback_query: CallbackQuery, state: FSMContext, session: Any, admin: bool):
    user_id = callback_query.from_user.id
    logger.info(f"[CALLBACK] –ü–æ–ª—É—á–µ–Ω callback 'check_subscription' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    try:
        member = await bot.get_chat_member(CHANNEL_ID, user_id)
        logger.info(f"[CALLBACK] –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {member.status}")

        if member.status not in ["member", "administrator", "creator"]:
            await callback_query.answer("–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)
            builder = InlineKeyboardBuilder()
            builder.row(InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription"))
            await callback_query.message.answer(
                f"–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ <a href='{CHANNEL_URL}'><b>–Ω–∞—à –∫–∞–Ω–∞–ª</b></a>\n"
                f"‚ÑπÔ∏è–¢–∞–º –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π, –∞ —Ç–∞–∫–∂–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞",
                reply_markup=builder.as_markup(),
            )
        else:
            await callback_query.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
            data = await state.get_data()
            original_text = data.get("original_text")
            if not original_text:
                original_text = callback_query.message.text
            await process_start_logic(callback_query.message, state, session, admin, text_to_process=original_text)
            logger.info(f"[CALLBACK] –ó–∞–≤–µ—Ä—à–µ–Ω –≤—ã–∑–æ–≤ process_start_logic –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except Exception as e:
        logger.error(f"[CALLBACK] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É", show_alert=True)


async def show_start_menu(message: Message, admin: bool, session: Any):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –º–µ–Ω—é"""
    logger.info(f"–ü–æ–∫–∞–∑—ã–≤–∞—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}")

    image_path = os.path.join("img", "pic.jpg")
    builder = InlineKeyboardBuilder()

    if session is not None:
        trial_status = await get_trial(message.chat.id, session)
        logger.info(f"Trial status –¥–ª—è {message.chat.id}: {trial_status}")
        if trial_status == 0:
            builder.row(InlineKeyboardButton(text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å VPN", callback_data="create_key"))
    else:
        logger.warning(f"–°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç—Ä–∏–∞–ª–∞ –¥–ª—è {message.chat.id}")

    builder.row(InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile"))

    if CHANNEL_EXISTS:
        builder.row(
            InlineKeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=SUPPORT_CHAT_URL),
            InlineKeyboardButton(text="üì¢ –ö–∞–Ω–∞–ª", url=CHANNEL_URL),
        )
    else:
        builder.row(InlineKeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=SUPPORT_CHAT_URL))

    if admin:
        builder.row(InlineKeyboardButton(text="üîß –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", callback_data="admin"))

    builder.row(InlineKeyboardButton(text="üåê –û VPN", callback_data="about_vpn"))

    if os.path.isfile(image_path):
        async with aiofiles.open(image_path, "rb") as image_from_buffer:
            image_data = await image_from_buffer.read()
            await message.answer_photo(
                photo=BufferedInputFile(image_data, filename="pic.jpg"),
                caption=WELCOME_TEXT,
                reply_markup=builder.as_markup(),
            )
    else:
        await message.answer(
            text=WELCOME_TEXT,
            reply_markup=builder.as_markup(),
        )


@router.callback_query(F.data == "about_vpn")
async def handle_about_vpn(callback_query: CallbackQuery):
    builder = InlineKeyboardBuilder()

    if DONATIONS_ENABLE:
        builder.row(InlineKeyboardButton(text="üí∞ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="donate"))

    builder.row(
        InlineKeyboardButton(text="üìû –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", url=SUPPORT_CHAT_URL),
    )
    if CHANNEL_EXISTS:
        builder.row(
            InlineKeyboardButton(text="üì¢ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª", url=CHANNEL_URL),
        )
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="start"))

    await callback_query.message.answer(get_about_vpn("3.2.3-minor"), reply_markup=builder.as_markup())
