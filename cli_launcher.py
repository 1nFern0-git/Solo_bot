import os
import sys
import subprocess
import requests
from rich.console import Console
from rich.prompt import Prompt, Confirm
from rich.table import Table
from rich.text import Text

from config import BOT_SERVICE

try:
    sys.stdin.reconfigure(encoding='utf-8')
    sys.stdout.reconfigure(encoding='utf-8')
except Exception:
    pass

if not os.environ.get("LC_ALL", "").endswith("UTF-8"):
    os.environ["LC_ALL"] = "en_US.UTF-8"
    os.environ["LANG"] = "en_US.UTF-8"

BACK_DIR = os.path.expanduser("~/.solobot_backup")
TEMP_DIR = os.path.expanduser("~/.solobot_tmp")
PROJECT_DIR = os.path.abspath(os.path.dirname(__file__))
GITHUB_REPO = "https://github.com/Vladless/Solo_bot"
SERVICE_NAME = BOT_SERVICE

console = Console()


def print_logo():
    logo = Text("""
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   
‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù   ‚ñà‚ñà‚ïë   
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ïö‚ïê‚ïù   
""", style="bold cyan")
    console.print(logo)


def backup_project():
    console.print("[yellow]–°–æ–∑–¥–∞—ë—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ø—Ä–æ–µ–∫—Ç–∞...[/yellow]")
    subprocess.run(["rm", "-rf", BACK_DIR])
    subprocess.run(["cp", "-r", PROJECT_DIR, BACK_DIR])
    console.print(f"[green]‚úÖ –ë—ç–∫–∞–ø —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {BACK_DIR}[/green]")


def install_git_if_needed():
    if subprocess.run(["which", "git"], capture_output=True).returncode != 0:
        console.print("[blue]–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Git...[/blue]")
        os.system("sudo apt update && sudo apt install -y git")


def install_dependencies():
    console.print("[blue]üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...[/blue]")
    os.system("source venv/bin/activate && pip install -r requirements.txt")


def restart_service():
    console.print("[blue]üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã...[/blue]")
    os.system(f"sudo systemctl restart {SERVICE_NAME}")


def update_from_beta():
    if not Confirm.ask("[yellow]üîÅ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Solobot —Å –≤–µ—Ç–∫–∏ BETA[/yellow]"):
        return

    backup_project()
    install_git_if_needed()

    os.chdir(PROJECT_DIR)
    git_dir = os.path.join(PROJECT_DIR, ".git")

    if os.path.isdir(git_dir):
        console.print("[cyan]üîÑ –ù–∞–π–¥–µ–Ω .git. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è git pull...[/cyan]")
        os.system("git reset --hard")
        os.system("git pull")
    else:
        console.print("[cyan]üì• .git –Ω–µ –Ω–∞–π–¥–µ–Ω. –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∑–∞–Ω–æ–≤–æ...[/cyan]")
        subprocess.run(["rm", "-rf", TEMP_DIR])
        if os.system(f"git clone {GITHUB_REPO} {TEMP_DIR}") != 0:
            console.print("[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.[/red]")
            return
        subprocess.run(["cp", "-r", f"{TEMP_DIR}/.", PROJECT_DIR])
        subprocess.run(["rm", "-rf", TEMP_DIR])

    install_dependencies()
    restart_service()
    console.print("[green]‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –≤–µ—Ç–∫–∏ BETA –∑–∞–≤–µ—Ä—à–µ–Ω–æ.[/green]")


def update_from_release():
    if not Confirm.ask("[yellow]üîÅ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Solobot –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–ª–∏–∑–∞[/yellow]"):
        return

    backup_project()
    install_git_if_needed()

    try:
        response = requests.get(
            "https://api.github.com/repos/Vladless/Solo_bot/releases/latest", timeout=10
        )
        tag_name = response.json().get("tag_name")

        if not tag_name:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–≥ —Ä–µ–ª–∏–∑–∞")

        console.print(f"[cyan]üì• –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ª–∏–∑ {tag_name} –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É...[/cyan]")
        subprocess.run(["rm", "-rf", TEMP_DIR])
        if os.system(f"git clone --depth 1 --branch {tag_name} {GITHUB_REPO} {TEMP_DIR}") != 0:
            console.print("[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–ª–∏–∑–∞. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.[/red]")
            return

        subprocess.run(["cp", "-r", f"{TEMP_DIR}/.", PROJECT_DIR])
        subprocess.run(["rm", "-rf", TEMP_DIR])

        install_dependencies()
        restart_service()
        console.print(f"[green]‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ —Ä–µ–ª–∏–∑–∞ {tag_name} –∑–∞–≤–µ—Ä—à–µ–Ω–æ.[/green]")

    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}[/red]")


def show_update_menu():
    table = Table(title="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", title_style="bold green")
    table.add_column("‚Ññ", justify="center", style="cyan", no_wrap=True)
    table.add_column("–ò—Å—Ç–æ—á–Ω–∏–∫", style="white")
    table.add_row("1", "–û–±–Ω–æ–≤–∏—Ç—å —Å BETA (git pull –∏–ª–∏ clone)")
    table.add_row("2", "–û–±–Ω–æ–≤–∏—Ç—å —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–ª–∏–∑–∞ (GitHub Release)")
    table.add_row("3", "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")

    console.print(table)
    choice = Prompt.ask("[bold blue]–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä[/bold blue]", choices=["1", "2", "3"])

    if choice == "1":
        update_from_beta()
    elif choice == "2":
        update_from_release()


def show_menu():
    table = Table(title="Solobot CLI", title_style="bold magenta", header_style="bold blue")

    table.add_column("‚Ññ", justify="center", style="cyan", no_wrap=True)
    table.add_column("–û–ø–µ—Ä–∞—Ü–∏—è", style="white")

    table.add_row("1", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ (systemd)")
    table.add_row("2", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é: venv/bin/python main.py")
    table.add_row("3", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ (systemd)")
    table.add_row("4", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞ (systemd)")
    table.add_row("5", "–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ (50 —Å—Ç—Ä–æ–∫)")
    table.add_row("6", "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å")
    table.add_row("7", "–û–±–Ω–æ–≤–∏—Ç—å Solobot")
    table.add_row("8", "–í—ã—Ö–æ–¥")

    console.print(table)


def main():
    if os.geteuid() != 0:
        console.print("[bold red]‚õî –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–ø—É—Å–∫ –æ—Ç –∏–º–µ–Ω–∏ root –∏–ª–∏ —á–µ—Ä–µ–∑ sudo.[/bold red]")
        sys.exit(1)
    
    os.chdir(PROJECT_DIR) 

    print_logo()

    while True:
        show_menu()
        choice = Prompt.ask("[bold blue]–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è[/bold blue]", choices=[str(i) for i in range(1, 9)])

        if choice == "1":
            os.system(f"sudo systemctl start {SERVICE_NAME}")
        elif choice == "2":
            if Confirm.ask("[green]–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å main.py –≤—Ä—É—á–Ω—É—é?[/green]"):
                os.system("sudo venv/bin/python main.py")
        elif choice == "3":
            if Confirm.ask("[yellow]–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞?[/yellow]"):
                os.system(f"sudo systemctl restart {SERVICE_NAME}")
        elif choice == "4":
            if Confirm.ask("[red]–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞?[/red]"):
                os.system(f"sudo systemctl stop {SERVICE_NAME}")
        elif choice == "5":
            os.system(f"sudo journalctl -u {SERVICE_NAME} -n 50 --no-pager")
        elif choice == "6":
            os.system(f"sudo systemctl status {SERVICE_NAME}")
        elif choice == "7":
            show_update_menu()
        elif choice == "8":
            console.print("[bold cyan]üëã –í—ã—Ö–æ–¥ –∏–∑ CLI. –£–¥–∞—á–Ω–æ–≥–æ –¥–Ω—è![/bold cyan]")
            break



if __name__ == "__main__":
    main()
